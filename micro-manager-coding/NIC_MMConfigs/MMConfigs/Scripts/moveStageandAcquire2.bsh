Runnable moveStage = new Runnable() {
        public void run() {
				gui.message("Moving to X " + stopX + " Y " + startY);
            mmc.setXYPosition(stageName, stopX, startY);
        };
};

acqName="bigtest2";
long width = mmc.getImageWidth();
long height = mmc.getImageHeight();
long depth = mmc.getBytesPerPixel();

String stageName = mmc.getXYStageDevice();

//Padding to allow for acceleration and deceleration of stage
//double startPadding = 430;
//double stopPadding = 450;
double padding = 1500;  //stage moves about this much before first acquisition

positionList = gui.getPositionList();
double maxX = positionList.getPosition(0).getX();
double minX = positionList.getPosition(0).getX();
double maxY = positionList.getPosition(0).getY();
double minY = positionList.getPosition(0).getY();

for (int pos = 1; pos < positionList.getNumberOfPositions(); pos++){
	maxX = Math.max(maxX, positionList.getPosition(pos).getX());
	minX = Math.min(minX, positionList.getPosition(pos).getX());
	maxY = Math.max(maxY, positionList.getPosition(pos).getY());
	minY = Math.min(minY, positionList.getPosition(pos).getY());
}


//How many images per strip do we need?
double xDistance = Math.abs(maxX - minX);
double cameraXFieldOfView = mmc.getPixelSizeUm() * width;
double cameraYFieldOfView = mmc.getPixelSizeUm() * height;
double fieldOverlap = 0.2; //fraction by which each field should overlap
double effectiveXFieldOfView = cameraXFieldOfView * (1 - fieldOverlap);
double effectiveYFieldOfView = cameraYFieldOfView * (1 - fieldOverlap);
int imagesPerStrip = Math.ceil(xDistance / effectiveXFieldOfView);
maxX = minX + effectiveXFieldOfView * imagesPerStrip;
gui.message("Images per strip: " + imagesPerStrip);

double yStepSize = effectiveYFieldOfView; //in microns
int nStripsToAcquire = Math.ceil(Math.abs(maxY-minY) / yStepSize);
gui.message("Will acquire " + nStripsToAcquire + " strips.");

//What interval between exposures do we need? 
//Want to travel effectiveFieldofView between each image
double stageVelocity = Double.parseDouble(mmc.getProperty("XYStage", "Speed-S")) *1000; //convert to um/sec from mm/sec
//set exposureInterval by number of fields per strip and expected transit time
//double msecPerStrip = (xDistance / stageVelocity) * 1000;
//double exposureInterval = msecPerStrip / imagesPerStrip;
exposureInterval = (effectiveXFieldOfView / stageVelocity) * 1000;
gui.message("Exposure interval: " + exposureInterval);
mmc.setExposure(exposureInterval);

//initial conditions
double startX = maxX + padding;
double stopX = minX - padding;
double startY = minY;

gui.message("Start X: " + startX);

//Initialize Acquisition
gui.closeAllAcquisitions();
gui.openAcquisition(acqName, "D:/AcquisitionData", imagesPerStrip * nStripsToAcquire, 1, 1, 1, true, true);
gui.initializeAcquisition(acqName, (int) width, (int) height, (int) depth);

mmc.setXYPosition(stageName, startX, startY);
mmc.waitForSystem();

int counter = 0;
for (int strip = 0; strip < nStripsToAcquire; strip++){
	//Start stage moving
	//gui.snapSingleImage();
	Thread myThread = new Thread(moveStage);
	myThread.start();
   //value = System.currentTimeMillis();

	mmc.prepareSequenceAcquisition(mmc.getCameraDevice());
	mmc.startSequenceAcquisition(imagesPerStrip, 0, false);
	//Acquisition starts about 268 msec after stage movement
   //value = System.currentTimeMillis() - value;
	//gui.message("Stage start to camera start (ms): " + value);

		while (mmc.isSequenceRunning() || mmc.getRemainingImageCount() > 0) {
		   if (mmc.getRemainingImageCount() > 0) {
				img = mmc.popNextImage();
			   gui.addImage(acqName, img, counter, 0, 0);
				counter++;
			} 
		}

	//Wait for stage thread to finish
	myThread.join();	

	//Update Y coordinate and move there
	startY = startY + yStepSize;
	mmc.setXYPosition(stageName, stopX, startY);
	mmc.waitForSystem();
	//Acquire images by zig-zagging. Can't test equality, so just see which we're closest to.
	if ((stopX - maxX)/(minX - maxX) < 0.5) {
		stopX = minX - padding;
	} else{
		stopX = maxX + padding;
	}
}
